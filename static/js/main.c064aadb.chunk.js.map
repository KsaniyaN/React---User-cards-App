{"version":3,"sources":["components/Card.js","components/CardList.js","components/Form.js","components/App.js","serviceWorker.js","index.js"],"names":["Card","profile","this","props","react_default","a","createElement","className","src","avatar_url","alt","name","company","React","Component","CardList","profiles","map","components_Card","Object","assign","key","id","axios","require","Form","state","userName","handleSubmit","_callee","event","resp","regenerator_default","wrap","_context","prev","next","preventDefault","get","concat","_this","sent","onSubmit","data","setState","stop","_this2","type","value","onChange","target","placeholder","required","App","addNewProfile","profileData","prevState","toConsumableArray","components_Form","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAkCeA,mLAvBb,IAAMC,EAAUC,KAAKC,MAErB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAKP,EAAQQ,WAAYC,IAAI,KAClCN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAUdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQN,EAAQU,MAC/BP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWN,EAAQW,kBAnBpBC,IAAMC,WCEVC,EAPE,SAACZ,GAAD,OAChBC,EAAAC,EAAAC,cAAA,WACEH,EAAMa,SAASC,IAAI,SAAAhB,GAAO,OAC1BG,EAAAC,EAAAC,cAACY,EAADC,OAAAC,OAAA,CAAMC,IAAKpB,EAAQqB,IAAQrB,gCCJxBsB,EAAQC,EAAQ,IA+BPC,6MA3BdC,MAAQ,CAACC,SAAU,MACnBC,mDAAe,SAAAC,EAAOC,GAAP,IAAAC,EAAA,OAAAC,EAAA3B,EAAA4B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACdN,EAAMO,iBADQH,EAAAE,KAAA,EAGKb,EAAMe,IAAN,gCAAAC,OAA0CC,EAAKd,MAAMC,WAH1D,OAGRI,EAHQG,EAAAO,KAKdD,EAAKrC,MAAMuC,SAASX,EAAKY,MAEzBH,EAAKI,SAAS,CAACjB,SAAU,KAPX,wBAAAO,EAAAW,SAAAhB,oIAUN,IAAAiB,EAAA5C,KACR,OACCE,EAAAC,EAAAC,cAAA,QAAMoC,SAAUxC,KAAK0B,cACpBxB,EAAAC,EAAAC,cAAA,SAAOyC,KAAK,OACRC,MAAO9C,KAAKwB,MAAMC,SAGlBsB,SAAU,SAAAnB,GAAK,OAAIgB,EAAKF,SAAS,CAACjB,SAAUG,EAAMoB,OAAOF,SACzDG,YAAY,kBACZC,UAAQ,IACZhD,EAAAC,EAAAC,cAAA,kCAvBeO,IAAMC,WC0DVuC,oNAjCd3B,MAAQ,CACPV,SAAU,MAEXsC,cAAgB,SAACC,GAEhBf,EAAKI,SAAS,SAAAY,GAAS,MAAK,CAE3BxC,SAAQ,GAAAuB,OAAApB,OAAAsC,EAAA,EAAAtC,CAAMqC,EAAUxC,UAAhB,CAA0BuC,gFAOnC,OACCnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,+CACAF,EAAAC,EAAAC,cAAA,+DAAsDF,EAAAC,EAAAC,cAAA,WAAtD,8BAGDF,EAAAC,EAAAC,cAACoD,EAAD,CAAMhB,SAAUxC,KAAKoD,gBACrBlD,EAAAC,EAAAC,cAACqD,EAAD,CAAU3C,SAAUd,KAAKwB,MAAMV,mBA/BjBH,IAAMC,YCRJ8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c064aadb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// const testData = [\r\n// \t{name: \"Dan Abramov\", avatar_url: \"https://avatars0.githubusercontent.com/u/810438?v=4\", company: \"@facebook\"},\r\n// \t{name: \"Sophie Alpert\", avatar_url: \"https://avatars2.githubusercontent.com/u/6820?v=4\", company: \"Humu\"},\r\n// \t{name: \"Xenia Novosilska\", avatar_url: \"https://avatars2.githubusercontent.com/u/50034855?v=4\", company: \"Library\"},\r\n// ];\r\n\r\nclass Card extends React.Component {\r\n\trender() {\r\n\t\t// const profile = testData[0];\r\n\t\tconst profile = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"github-profile\">\r\n\t\t\t\t<img src={profile.avatar_url} alt=\"\"/>\r\n\t\t\t\t<div className=\"info\">\r\n\t\t\t\t\t{/* Sample of inline styling using javascript syntax\r\n\t\t\t\t\t Can be used for a conditional styles, for example */}\r\n\t\t\t\t\t{/*<div className=\"name\" style={{fontSize: '125%'}}>Name here..</div>*/}\r\n\r\n\t\t\t\t\t{/* Conditional styling */}\r\n\t\t\t\t\t{/*<div style={{color: Math.random() < 0.5 ? 'green' : 'blue'}}>*/}\r\n\t\t\t\t\t{/*\tHow do you like it?*/}\r\n\t\t\t\t\t{/*</div>*/}\r\n\r\n\t\t\t\t\t<div className=\"name\">{profile.name}</div>\r\n\t\t\t\t\t<div className=\"company\">{profile.company}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = (props) => (\r\n\t<div>\r\n\t\t{props.profiles.map(profile =>\r\n\t\t\t<Card key={profile.id} {...profile}/>)}\r\n\t</div>\r\n);\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst axios = require('axios');\r\n\r\nclass Form extends React.Component {\r\n\r\n\tstate = {userName: ''};\r\n\thandleSubmit = async (event) => {\r\n\t\tevent.preventDefault(); \t// otherwise the page is going to refresh\r\n\t\t// ToDo: create a separate agent type module to communicate with API\r\n\t\tconst resp = await axios.get(`https://api.github.com/users/${this.state.userName}`);\r\n\t\t// console.log(resp.data);\r\n\t\tthis.props.onSubmit(resp.data);\r\n\t\t// reset the state of input after submit\r\n\t\tthis.setState({userName: ''});\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t\t<input type=\"text\"\r\n\t\t\t\t\t   value={this.state.userName}    // React takes control over the input value\r\n\t\t\t\t\t// grab the input value when changed\r\n\t\t\t\t\t// ToDo: extract the logic about managing the state into it's own component\r\n\t\t\t\t\t   onChange={event => this.setState({userName: event.target.value})}\r\n\t\t\t\t\t   placeholder=\"GitHub username\"\r\n\t\t\t\t\t   required/>\r\n\t\t\t\t<button>Add card</button>\r\n\t\t\t</form>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Form;","import React from 'react';\n\nimport CardList from './CardList';\nimport Form from './Form';\n\nimport '../styles/styles.css';\n\n// static data for testing\n// const testData = [\n// \t{name: \"Dan Abramov\", avatar_url: \"https://avatars0.githubusercontent.com/u/810438?v=4\", company: \"@facebook\"},\n// \t{name: \"Sophie Alpert\", avatar_url: \"https://avatars2.githubusercontent.com/u/6820?v=4\", company: \"Humu\"},\n// \t{name: \"Xenia N\", avatar_url: \"https://avatars2.githubusercontent.com/u/50034855?v=4\", company: \"Library\"},\n// ];\n\n// ToDo: Handle errors like * invalid input, * network problems\n\n// ToDo: as an exercise - convert all class components to function components\n// ToDo: state --> hook, setState --> updater function from the hook\n\n// class way of defining Component\nclass App extends React.Component {\n\t// initializing the state object\n\t// constructor(props){\n\t// \tsuper(props);\n\t// \tthis.state={\n\t// \t\tprofiles: testData,\n\t// \t};\n\t// }\n\t// same initializing in a shorter way\n\tstate = {\n\t\tprofiles: []\n\t};\n\taddNewProfile = (profileData) => {\n\t\t// console.log('App', profileData);\n\t\tthis.setState(prevState => ({\n\t\t\t// same as concat\n\t\t\tprofiles: [...prevState.profiles, profileData],\n\t\t}));\n\t};\n\n\t// required render function\n\trender() {\n\t\t// returns the Virtual DOM description of my component\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"header\">\n\t\t\t\t\t<h2>Xenia's GitHub Cards App on React</h2>\n\t\t\t\t\t<p>Take input from the user, call a public Github API,<br/> update the list of users</p>\n\t\t\t\t</div>\n\n\t\t\t\t<Form onSubmit={this.addNewProfile}/>\n\t\t\t\t<CardList profiles={this.state.profiles}/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// function way of defining Component\n// const App = ({title}) => (\n//   <div className=\"header\">{title}</div>\n// );\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}